In previous lectures we studied how node.js works on the JS V8 engine and its properties and hisory and this video we will understand about how module.export and require works.
Lets say you have two JS files in a directory and need to run one file into another now to do this u can use require. 
If you have a file called app.js and u need to run the code f index.js into it so then you will use "require(./index.js)" which will run the code of index.js file before running the code off app.js. But in this way you can only access the log statements of the code and not the variables and function of index.js into app.js simply by requiring.
Now in another situation if you want to run particular code of a function lets say there is a sum function in index.js to do that you will have to export the sum function in the code of index.js as "module.exports = "sum"" , after that you willhave to include to include that in your code of app.js you have to declate a variable equate it to "require ("./index.js")" this will allow you to access the function of index.js into app.js.
If you want to export multiple functions and variables you can do that by exporting them as objects and use destructuring of objects in reequiring them.
There is another way of importing and exporting module and that is via ES module, you have to change the type in package.json to module to use thisit is the new way. To export things you just have to write the word export before the function or variable and import it using (import {x,sum} from "./index.js").
The major diffrence b/w both the ways is that commonJS method is synchronous so you'll have to wait until the imported file has executed but with ESM you can use asynchronous method. Also in CSM the functions runs in a non strict mode but in ESM it works in strict mode.
If you want to require JSON to your app.js you dont need an export statement in the json file just directly use require in the app.js.
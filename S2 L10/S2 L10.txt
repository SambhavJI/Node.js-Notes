Whenever we login to a website the server generates a JWT token which is sent along with the responce inside a cookie this is stored by the browser and whenever the user makes any api call line message, like etc. it sends the cookie along with the req and the browser validates it.
Now JWT's also have a timer which tells until when the user can stay without login in again.
First we need something to read the cookies for that we use cookie parser library of npm which gives us the built in middleware of express.cookie-parser().
JWT consist of three parts header, payload and signature the payload is the information we send and the signature is used to verify the jwt.
After this we will go to our login api where we will generate the JWT token for that we will install the jsonwebtoken library and use its function of jwt.sign which creates a jwt this function takes two argsand an options arg the first one is the data we want to send as the payload and the second one is a secret key.
After creating the jwt we will sent it to user via the res.cookie methot which takes two args where we will pass our jwt.
After we created out jwt token and passed it to a user after login we can verify the user on any other api call simply by taking the token from the req and sending it to the jwt function verify along with the secret key and it will return us a decoded message of the payload we passed in this case the userId which we can verify.
Next we will use a auth middleware to validate the user , in this middleware we will first check if there is a jwt token or not after that we will decode the token with our secret key then we will extract the id of the user from decoded key and then finally check if the user exists or not. After all this we will use the next argument to direct the middleware to the next response in this middleware we can aslo pass user info by sneding it along with request via req.users.
To make the jwt expire we can pass the expires in function along with the data and password along with this we can also expire cookies.
We will use mongoose to connect mongoDB from our server we have to install it via npm i mongoose and then require it in a js file.
Now we can simply connect to our database using mongoose.connect and provide a connection string over there but it is not a good practice so we instead put the whole code inside an async function and then await the mongoose.connect.
Mongoose.connect returns us a promise so we can use .then and .catch to handle it then we can reqire it in out main server file.
SCHEMA - A schema is the structure or blueprint of a database. It defines how data is organized, including tables, columns, relationships, constraints, and indexes. For example, a database schema might specify a table called "Users" with columns like "UserID," "Name," and "Email."
To define a schema in mongoose we create a diffrent file and then require mongoose , after that we can just use the mongoose.schema method which takes an object as a parameter to define schema. In this object there are several aspects of our schema like name etc. along with its types eg string or number etc.
After creating a schema you have to create a mongoose model just by the function mongoose.models() which takes name as the first parameter and a schema as the second parameter and then you can export it.
After this if you want to save your lets say user data to the mongoDb database you can do that by creating a http request for lets say signup this can be a post request, in the request handler function you create a new object using the new keyword this will be the mongooose model you imported after that you can do user.save this returns a promise and saves the data to the database.
After you send a post request to the route you will find that the data we sended is logges in the mongoDB compass and only those values were added which were in the schema.
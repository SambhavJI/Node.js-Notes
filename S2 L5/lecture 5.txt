If you left a route handler empty it will send no reqs resulting in a timeout, Multiple route handlers can be used for a single route.You nedd to pas the next in the parameters of a route handler otherwise it will not go to the next route handler.
In Express.js, middleware refers to functions that have access to the request (req) and response (res) objects, as well as the next() function, which passes control to the next middleware in the stack. These functions are executed in the order they are defined and are crucial for handling and modifying incoming requests, processing data, managing authentication, logging, error handling, and more. Express supports various types of middleware, including built-in ones like express.json() for parsing JSON, third-party ones like morgan for logging, and custom middleware written by developers. Middleware can be applied at the application level, router level, or as error-handling middleware. They form the core structure of an Express app, enabling modular and reusable code for handling HTTP requests and responses efficiently.
Lets say we have a auth api which need to be checked before every request to /admin/xyz etc. so we can use middleware to keep the code clean and in this case we can make a middleware for all /admin calls and then we can just make it run before any api calls to /admin/xyz see code commit for further knowledge.
Error handling:-
You should always try to write the code in try catch block but if still sometime the error persists you can send the error via the route handler where you can put error as a first parameter of the function(err,req,res,next) and then you can send the error message via using this err object.

In this lecture we studied about the thread pool in node.js. 1 cycle of the event loop is called a tick.In libuv there are four threads in a thread pool by default and if there are more then 4 async tasks libuv waits for the work to finish.
libuv’s thread pool allows asynchronous execution of blocking tasks by offloading them to a pool of worker threads, separate from the main event loop. When a blocking operation—such as file I/O or a user-defined task—is submitted using uv_queue_work(), it gets added to a queue. Available threads from the pool (default size 4, configurable via UV_THREADPOOL_SIZE) pick up these tasks and execute the blocking logic in the background. Once a thread finishes the work, a callback is queued to run in the main event loop, allowing the result to be handled without blocking the application. This design ensures that CPU-bound or I/O-heavy operations don't freeze the non-blocking event loop, maintaining responsiveness in applications.
Node js is single threaded if the call stack is empty and the code is sychronous and multi threaded if there is some blocking async code.
